group_by(across(infect_prop_A:threshold)) %>%
summarise(p_hat_obs = mean(prop), SD_obs = sd(prop),
p_hat_int = mean(p_hat_int), p_hat_disp = mean(p_hat_disp),
.groups="drop") %>%
mutate(SD_theo = sqrt(p_hat_int * (1 - p_hat_int)),
SD_disp = (p_hat_disp * (1 - p_hat_disp))) %>%
filter(!((threshold == "100") & (SD_obs > 0.15)))
a <- ggplot(all_SDs_obs, aes(x = p_hat_obs, y = SD_obs)) +
geom_point() + facet_wrap(~threshold, scales = "free")
plot(a)
form
get_formula <- function(resp_var, control_var, data, int = TRUE){
model_vars = data %>%
select(-!!resp_var, -!!control_var) %>%
names()
# First-order terms
(form_str <- paste(model_vars, collapse = " + "))
(form_str <- paste(control_var, form_str, sep = " + "))
(form_str <- paste(resp_var, form_str, sep = " ~ "))
# Second-order terms. Only include interactions with the control variable
if (int) {
(form_int_str <- paste(model_vars, control_var, sep = "*"))
(form_int_str <- paste(form_int_str, collapse = " + "))
(form_str <- paste(form_str, form_int_str, sep = " + "))
}
# Convert string to formula object
form = formula(form_str)
form
}
form_main <- get_formula(prop, c(), data_logit)
form_main <- get_formula("prop", c(), data_logit)
resp_var = "form"
control_var = c()
data = data_logit
data
model_vars = data %>%
select(-!!resp_var, -!!control_var) %>%
names()
resp_var
resp_var = "prop"
model_vars = data %>%
select(-!!resp_var, -!!control_var) %>%
names()
model_vars
# First-order terms
(form_str <- paste(model_vars, collapse = " + "))
(form_str <- paste(control_var, form_str, sep = " + "))
(form_str <- paste(resp_var, form_str, sep = " ~ "))
form_main <- get_formula("prop", c(), data_logit, int = F)
form_main
all_fits <- glm(form_main, all_SDs_obs, family = binomial())
### Remove extreme outlier from original data frame
ind_remove <- with(all_SDs_obs, which(threshold == "100" & SD_obs > 0.15))
ind_remove
### Estimate SD of Y in each group empirically
all_SDs_obs = data_logit %>%
group_by(across(infect_prop_A:threshold)) %>%
summarise(p_hat_obs = mean(prop), SD_obs = sd(prop),
p_hat_int = mean(p_hat_int), p_hat_disp = mean(p_hat_disp),
.groups="drop") %>%
mutate(SD_theo = sqrt(p_hat_int * (1 - p_hat_int)),
SD_disp = (p_hat_disp * (1 - p_hat_disp)))
?%<>%
### Estimate SD of Y in each group empirically
all_SDs_obs_raw = data_logit %>%
group_by(across(infect_prop_A:threshold)) %>%
summarise(p_hat_obs = mean(prop), SD_obs = sd(prop),
p_hat_int = mean(p_hat_int), p_hat_disp = mean(p_hat_disp),
.groups="drop") %>%
mutate(SD_theo = sqrt(p_hat_int * (1 - p_hat_int)),
SD_disp = (p_hat_disp * (1 - p_hat_disp)))
all_SDs_obs <- filter(all_SDs_obs_raw,
!((threshold == "100") & (SD_obs > 0.15)))
### Remove extreme outlier from original data frame
row_remove <- filter(all_SDs_obs_raw, (threshold == "100") & (SD_obs > 0.15))
row_remove
### Remove extreme outlier from original data frame
row_remove <- all_SDs_obs_raw %>%
filter((threshold == "100") & (SD_obs > 0.15)) %>%
select(infect_prop_A:threshold)
row_remove
data_logit
data_logit = data %>%
mutate(prop = size/num_students) %>%
select(-size)
data_logit = data %>%
mutate(prop = size/num_students) %>%
select(-size)
library(dplyr)
library(magrittr)
library(ggplot2)
library(gridExtra)
library(purrr)
num_students <- 25627
data <- read.csv("C:/Users/willi/Desktop/School/Thesis/COVID_Network_Julia/Data/Output/All_Outbreak_Sizes.csv")
num_trials = nrow(data)
# ------------- Replace infinity character in threshold variable ------------- #
thresh <- data$threshold
inds_thresh <- thresh == unique(thresh)[4]
data[inds_thresh, "threshold"] <- "inf"
data$threshold = factor(data$threshold, levels = c("20", "50", "100", "inf"))
for (i in 1:(ncol(data)-1)) {
data[, i] <- factor(data[, i])
}
for (i in 1:(ncol(data)-2)) {
levels(data[,i]) <- c("low", "med", "high")
}
get_formula <- function(resp_var, control_var, data, int = TRUE){
model_vars = data %>%
select(-!!resp_var, -!!control_var) %>%
names()
# First-order terms
(form_str <- paste(model_vars, collapse = " + "))
(form_str <- paste(control_var, form_str, sep = " + "))
(form_str <- paste(resp_var, form_str, sep = " ~ "))
# Second-order terms. Only include interactions with the control variable
if (int) {
(form_int_str <- paste(model_vars, control_var, sep = "*"))
(form_int_str <- paste(form_int_str, collapse = " + "))
(form_str <- paste(form_str, form_int_str, sep = " + "))
}
# Convert string to formula object
form = formula(form_str)
form
}
data_logit = data %>%
mutate(prop = size/num_students) %>%
select(-size)
## Build formula for logistic regression
form = get_formula("prop", "threshold", data_logit)
## Fit model with and without interactions
fit_glm_main <- glm(prop ~ ., family = binomial(),
data = data_logit, weights = rep(num_students, times = num_trials))
fit_glm_int <- glm(form, family = binomial(),
data = data_logit, weights = rep(num_students, times = num_trials))
fit_glm_main_disper <- glm(prop ~ ., family = quasibinomial(),
data = data_logit, weights = rep(num_students, times = num_trials))
fit_glm_main_disper <- glm(prop ~ ., family = quasibinomial(),
data = data_logit, weights = rep(num_students, times = num_trials))
fit_glm_int_disper <- glm(form, family = quasibinomial(),
data = data_logit, weights = rep(num_students, times = num_trials))
## Extract fitted proportions from models with interactions
p_hat_int = predict(fit_glm_int, type = "response")
p_hat_int_disper = predict(fit_glm_int_disper, type = "response")
### Estimate SD of Y in each group empirically
all_SDs_obs_raw = data_logit %>%
add_column(p_hat_int = p_hat_int, p_hat_disp = p_hat_int_disper) %>%
group_by(across(infect_prop_A:threshold)) %>%
summarise(p_hat_obs = mean(prop), SD_obs = sd(prop),
p_hat_int = mean(p_hat_int), p_hat_disp = mean(p_hat_disp),
.groups="drop") %>%
mutate(SD_theo = sqrt(p_hat_int * (1 - p_hat_int)),
SD_disp = (p_hat_disp * (1 - p_hat_disp)))
library(tibble)
?add_column
### Estimate SD of Y in each group empirically
all_SDs_obs_raw = data_logit %>%
add_column(p_hat_int = p_hat_int, p_hat_disp = p_hat_int_disper) %>%
group_by(across(infect_prop_A:threshold)) %>%
summarise(p_hat_obs = mean(prop), SD_obs = sd(prop),
p_hat_int = mean(p_hat_int), p_hat_disp = mean(p_hat_disp),
.groups="drop") %>%
mutate(SD_theo = sqrt(p_hat_int * (1 - p_hat_int)),
SD_disp = (p_hat_disp * (1 - p_hat_disp)))
all_SDs_obs_raw
all_SDs_obs <- filter(all_SDs_obs_raw,
!((threshold == "100") & (SD_obs > 0.15)))
a <- ggplot(all_SDs_obs, aes(x = p_hat_obs, y = SD_obs)) +
geom_point() + facet_wrap(~threshold, scales = "free")
plot(a)
### Remove extreme outlier from original data frame
row_remove <- all_SDs_obs_raw %>%
filter((threshold == "100") & (SD_obs > 0.15)) %>%
select(infect_prop_A:threshold)
data_logit
filter(data_logit, infect_prop_A:infect_param_I2 == c("low", "low", "low"))
filter(data_logit, infect_prop_A == "low")
?filter_at
?across
?colwise
test <- data_logit %>%
group_by(infect_prop_A:threshold)
test
test <- data_logit %>%
group_by(across(infect_prop_A:threshold))
test
?across
q <- data_logit %>%
group_by(across(-prop))
q
group_rows(q)
q <- data_logit %>%
group_by(across(-prop)) %>%
w <- group_data(q)
w <- group_data(q)
w
w$.rows
?slice
?match
### Remove extreme outlier from original data frame
ind_remove <- all_SDs_obs_raw %>%
row_number((threshold == "100") & (SD_obs > 0.15))
filter
?filter
q
q <- data_logit %>%
group_by(across(-prop)) %>%
group_data() %>%
filter(across(infect_prop_A:threshold) == row_remove)
row_remove
q <- data_logit %>%
group_by(across(-prop)) %>%
group_data()
q
q <- data_logit %>%
filter(!(across(1) == row_remove[1]))
row_remove[1]
q <- data_logit %>%
filter(!(infect_prop_A == row_remove[1]))
q <- data_logit %>%
filter(across(1) == "low")
row_remove[[1]]
q <- data_logit %>%
filter(across(1) == row_remove[[1]])
q <- data_logit %>%
filter(across(1) == row_remove[1])
row_remove[1]
q <- data_logit %>%
filter(across(1) %in% row_remove[1])
q
q <- data_logit %>%
filter(across(1) %in% row_remove[[1]])
q
q <- data_logit %>%
filter(infect_prop_A %in% row_remove[[1]])
q
q <- data_logit %>%
filter(infect_prop_A %in% row_remove[1])
q
]
q <- data_logit %>%
filter(infect_prop_A %in% row_remove[[1]])
q
names(data_logit)
q <- data_logit %>%
filter(!((infect_prop_A %in% row_remove[[1]]) &
(infect_prop_I1 %in% row_remove[[2]]) &
(infect_param_I2 %in% row_remove[[3]])))
q
q <- data_logit %>%
filter(((infect_prop_A %in% row_remove[[1]]) &
(infect_prop_I1 %in% row_remove[[2]]) &
(infect_param_I2 %in% row_remove[[3]])))
q
names(data_logit)
q <- data_logit %>%
filter(((infect_prop_A %in% row_remove[[1]]) &
(infect_prop_I1 %in% row_remove[[2]]) &
(infect_param_I2 %in% row_remove[[3]]) &
(advance_prob_E %in% row_remove[[4]]) &
(advance_prob_A %in% row_remove[[5]]) &
(advance_prob_I1 %in% row_remove[[6]]) &
(advance_prob_I2 %in% row_remove[[7]]) &
(E_to_A_prob %in% row_remove[[8]]) &
(threshold %in% row_remove[[9]])
))
q
q <- data_logit %>%
filter(!((infect_prop_A %in% row_remove[[1]]) &
(infect_prop_I1 %in% row_remove[[2]]) &
(infect_param_I2 %in% row_remove[[3]]) &
(advance_prob_E %in% row_remove[[4]]) &
(advance_prob_A %in% row_remove[[5]]) &
(advance_prob_I1 %in% row_remove[[6]]) &
(advance_prob_I2 %in% row_remove[[7]]) &
(E_to_A_prob %in% row_remove[[8]]) &
(threshold %in% row_remove[[9]])
))
q
?setdiff
pred_vars <- setdiff(names(data_logit), c("prop")
pred_vars <- setdiff(names(data_logit), c("prop"))
pred_vars
?map
check <- map(data_logit, ~ all(.[pred_vars] == row_remove))
check <- apply(data_logit, 1, function(X){
X[pred_vars]
})
check
X[pred_vars] == row_remove
check <- apply(data_logit, 1, function(X){
X[pred_vars] == row_remove
})
check <- apply(data_logit[1:100,], 1, function(X){
X[pred_vars] == row_remove
})
check
check <- apply(data_logit[1:100,], 1, function(X){
all(X[pred_vars] == row_remove)
})
check
check <- pbapply(data_logit, 1, function(X){
all(X[pred_vars] == row_remove)
})
library(pbapply)
check <- pbapply(data_logit, 1, function(X){
all(X[pred_vars] == row_remove)
})
q <- data_logit %>%
filter(!((infect_prop_A %in% row_remove[[1]]) &
(infect_prop_I1 %in% row_remove[[2]]) &
(infect_param_I2 %in% row_remove[[3]]) &
(advance_prob_E %in% row_remove[[4]]) &
(advance_prob_A %in% row_remove[[5]]) &
(advance_prob_I1 %in% row_remove[[6]]) &
(advance_prob_I2 %in% row_remove[[7]]) &
(E_to_A_prob %in% row_remove[[8]]) &
(threshold %in% row_remove[[9]])
))
q
data_logit %<>% filter(!((infect_prop_A %in% row_remove[[1]]) &
(infect_prop_I1 %in% row_remove[[2]]) &
(infect_param_I2 %in% row_remove[[3]]) &
(advance_prob_E %in% row_remove[[4]]) &
(advance_prob_A %in% row_remove[[5]]) &
(advance_prob_I1 %in% row_remove[[6]]) &
(advance_prob_I2 %in% row_remove[[7]]) &
(E_to_A_prob %in% row_remove[[8]]) &
(threshold %in% row_remove[[9]])
))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(magrittr)
library(ggplot2)
library(gridExtra)
library(purrr)
library(tibble)
num_students <- 25627
data <- read.csv("C:/Users/willi/Desktop/School/Thesis/COVID_Network_Julia/Data/Output/All_Outbreak_Sizes.csv")
num_trials = nrow(data)
# ------------- Replace infinity character in threshold variable ------------- #
thresh <- data$threshold
inds_thresh <- thresh == unique(thresh)[4]
data[inds_thresh, "threshold"] <- "inf"
data$threshold = factor(data$threshold, levels = c("20", "50", "100", "inf"))
for (i in 1:(ncol(data)-1)) {
data[, i] <- factor(data[, i])
}
for (i in 1:(ncol(data)-2)) {
levels(data[,i]) <- c("low", "med", "high")
}
get_formula <- function(resp_var, control_var, data, int = TRUE){
model_vars = data %>%
select(-!!resp_var, -!!control_var) %>%
names()
# First-order terms
(form_str <- paste(model_vars, collapse = " + "))
(form_str <- paste(control_var, form_str, sep = " + "))
(form_str <- paste(resp_var, form_str, sep = " ~ "))
# Second-order terms. Only include interactions with the control variable
if (int) {
(form_int_str <- paste(model_vars, control_var, sep = "*"))
(form_int_str <- paste(form_int_str, collapse = " + "))
(form_str <- paste(form_str, form_int_str, sep = " + "))
}
# Convert string to formula object
form = formula(form_str)
form
}
### Use logistic regression to model proportion who are ever infected
data_logit_raw = data %>%
mutate(prop = size/num_students) %>%
select(-size)
## Build formula for logistic regression
form = get_formula("prop", "threshold", data_logit_raw)
## Fit model with and without interactions
fit_glm_main <- glm(prop ~ ., family = binomial(),
data = data_logit_raw, weights = rep(num_students, times = num_trials))
fit_glm_int <- glm(form, family = binomial(),
data = data_logit_raw, weights = rep(num_students, times = num_trials))
fit_glm_main_disper <- glm(prop ~ ., family = quasibinomial(),
data = data_logit_raw, weights = rep(num_students, times = num_trials))
fit_glm_int_disper <- glm(form, family = quasibinomial(),
data = data_logit_raw, weights = rep(num_students, times = num_trials))
## Extract fitted proportions from models with interactions
p_hat_int = predict(fit_glm_int, type = "response")
p_hat_int_disper = predict(fit_glm_int_disper, type = "response")
### Estimate SD of Y in each group empirically
all_SDs_obs_raw = data_logit_raw %>%
add_column(p_hat_int = p_hat_int, p_hat_disp = p_hat_int_disper) %>%
group_by(across(infect_prop_A:threshold)) %>%
summarise(p_hat_obs = mean(prop), SD_obs = sd(prop),
p_hat_int = mean(p_hat_int), p_hat_disp = mean(p_hat_disp),
.groups="drop") %>%
mutate(SD_theo = sqrt(p_hat_int * (1 - p_hat_int)),
SD_disp = (p_hat_disp * (1 - p_hat_disp)))
all_SDs_obs <- filter(all_SDs_obs_raw,
!((threshold == "100") & (SD_obs > 0.15)))
form_main <- get_formula("prop", c(), data_logit, int = F)
all_fits <- glm(form_main, data_logit, family = binomial())
all_fits <- glm(form_main, data_logit, family = binomial(),
weights = rep(num_students, times = num_trials))
all_fits <- glm(form_main, data_logit, family = binomial(),
weights = rep(num_students, times = num_trials-10))
all_fits <- glm(form_main, data_logit, family = binomial(),
weights = num_students)
all_fits <- glm(form_main, data_logit, family = binomial(),
weights = rep(num_students, times = nrow(data_logit)))
all_fits
all_fits <- data_logit %>%
group_by(threshold) %>%
glm(form_main, ., family = binomial(),
weights = rep(num_students, times = nrow(data_logit)))
all_fits
all_fits <- data_logit %>%
group_by(threshold) %>%
summarize(fit = glm(form_main, ., family = binomial(),
weights = rep(num_students, times = nrow(data_logit))))
all_thresholds <- unique(data_logit$threshold)
all_thresholds
all_fits <- lapply(all_thresholds, function(thresh){
all_thresholds <- unique(data_logit$threshold)
all_fits <- lapply(all_thresholds, function(thresh){
this_data <- filter(data_logit, threshold == !!thresh)
})
all_fits
all_fits <- lapply(all_thresholds, function(thresh){
this_data <- filter(data_logit, threshold == !!thresh)
fit = glm(form_main, this_data, family = quasibinomial(),
weights = rep(num_students, times = nrow(this_data)))
})
all_fits <- lapply(all_thresholds, function(thresh){
this_data <- filter(data_logit, threshold == !!thresh)
this_wts <- rep(num_students, times = nrow(this_data))
fit = glm(form_main, this_data, family = quasibinomial(),
weights = this_wts)
})
thresh <- all_thresholds[1]
this_data <- filter(data_logit, threshold == !!thresh)
this_wts <- rep(num_students, times = nrow(this_data))
fit = glm(form_main, this_data, family = quasibinomial(),
weights = this_wts)
this_data
head(this_data)
this_wts
length(this_wts)
nrow(this_data)
all_fits <- lapply(all_thresholds, function(thresh){
this_data <- filter(data_logit, threshold == !!thresh)
this_wts <- rep(num_students, times = nrow(this_data))
fit = glm(form_main, this_data, family = binomial(),
weights = this_wts)
})
form_main
data_logit
form_main <- data_logit %>%
select(-threshold) %>%
get_formula("prop", c(), ., int = F)
form_main
all_fits <- lapply(all_thresholds, function(thresh){
this_data <- filter(data_logit, threshold == !!thresh)
this_wts <- rep(num_students, times = nrow(this_data))
fit = glm(form_main, this_data, family = binomial(),
weights = this_wts)
})
all_fits <- lapply(all_thresholds, function(thresh){
print(thresh)
this_data <- filter(data_logit, threshold == !!thresh)
this_wts <- rep(num_students, times = nrow(this_data))
fit = glm(form_main, this_data, family = binomial(),
weights = this_wts)
})
all_fits <- lapply(all_thresholds, function(thresh){
print(thresh)
this_data <- filter(data_logit, threshold == !!thresh)
this_wts <- rep(num_students, times = nrow(this_data))
print(nrow(this_data))
print(length(this_wts))
fit = glm(form_main, this_data, family = binomial(),
weights = this_wts)
})
form_main
toString(form_main)
form_main
form_main[1]
str(form_main)
?deparse
deparse(form_main)
cat(deparse(form_main))
paste0(deparse(form_main))
paste(deparse(form_main), collapse = "")
form_str <- paste(deparse(form_main), collapse = "")
fit = glm(formula(form_str), this_data, family = binomial(),
weights = this_wts)
all_fits <- lapply(all_thresholds, function(thresh){
print(thresh)
this_data <- filter(data_logit, threshold == !!thresh)
this_wts <- rep(num_students, times = nrow(this_data))
print(nrow(this_data))
print(length(this_wts))
fit = glm(formula(form_str), this_data, family = binomial(),
weights = this_wts)
fit
})
all_fits
all_fits <- lapply(all_thresholds, function(thresh){
this_data <- filter(data_logit, threshold == !!thresh)
this_wts <- rep(num_students, times = nrow(this_data))
fit = glm(formula(form_str), this_data, family = binomial(),
weights = this_wts)
fit
})
