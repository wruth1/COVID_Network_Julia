"0","num_students <- 25627"
"0",""
"0","data <- "
"0","    read.csv(""D:/School/Thesis/COVID_Network_Julia/Data/Output/All_Outbreak_Peaks.csv"")"
"0",""
"0",""
"0","num_trials = nrow(data)"
"0",""
"0","# Number of students remaining in the network for each threshold level"
"0","network_sizes <- c(16866, 23660, 24752, 25627)"
"0",""
"0","# ------------- Replace infinity character in threshold variable ------------- #"
"0","thresh <- data$threshold"
"0","inds_thresh <- thresh == unique(thresh)[4]"
"0","data[inds_thresh, ""threshold""] <- ""inf"""
"0","data$threshold = factor(data$threshold, levels = c(""20"", ""50"", ""100"", ""inf""))"
"0",""
"0","all_thresholds <- unique(data$threshold)"
"0","thresh2size <- function(thresh){"
"0","  switch(thresh,"
"0","    ""20"" = network_sizes[1],"
"0","    ""50"" = network_sizes[2],"
"0","    ""100"" = network_sizes[3],"
"0","    ""inf"" = network_sizes[4],"
"0","    stop(""Invalid threshold level.""))"
"0","}"
"0",""
"0","for (i in 1:(ncol(data)-1)) {"
"0","  data[, i] <- factor(data[, i])"
"0","}"
"0",""
"0","for (i in 1:(ncol(data)-2)) {"
"0","  levels(data[,i]) <- c(""low"", ""med"", ""high"")"
"0","}"
"0",""
"0",""
"0",""
"0","get_formula <- function(resp_var, control_var, data, int = TRUE){"
"0","  model_vars = data %>%"
"0","    select(-!!resp_var, -!!control_var) %>%"
"0","    names()"
"0","  "
"0","  # First-order terms"
"0","  (form_str <- paste(model_vars, collapse = "" + ""))"
"0","  (form_str <- paste(control_var, form_str, sep = "" + ""))"
"0","  (form_str <- paste(resp_var, form_str, sep = "" ~ ""))"
"0","  "
"0","  # Second-order terms. Only include interactions with the control variable"
"0","  if (int) {"
"0","    (form_int_str <- paste(model_vars, control_var, sep = ""*""))"
"0","    (form_int_str <- paste(form_int_str, collapse = "" + ""))"
"0","    (form_str <- paste(form_str, form_int_str, sep = "" + ""))"
"0","  }"
"0","  "
"0","  # Convert string to formula object"
"0","  form = formula(form_str)"
"0","  "
"0","  form"
"0","}"
"0",""
"0","### Build vector of proportions"
"0","group_size <- num_trials/4"
"0","all_network_sizes <- rep(network_sizes, "
"0","  each = group_size)"
"0","data_logit_raw <- data %>% "
"0","  arrange(threshold) %>% "
"0","  mutate(size = all_network_sizes, "
"0","    prop = peak / size) %>% "
"0","  select(-peak, -size)"
"0",""
"0",""
"0","### Use logistic regression to model proportion who are ever infected"
"0",""
"0","## Build formula for logistic regression"
"0","form = get_formula(""prop"", ""threshold"", data_logit_raw)"
"0",""
"0",""
"0","## Fit model with and without interactions"
"0","fit_glm_main <- glm(prop ~ ., family = binomial(), "
"0","  data = data_logit_raw, weights = rep(network_sizes, each = group_size))"
"0","fit_glm_int <- glm(form, family = binomial(), "
"0","  data = data_logit_raw, weights = rep(network_sizes, each = group_size))"
"0",""
"0","fit_glm_main_disper <- glm(prop ~ ., family = quasibinomial(), "
"0","  data = data_logit_raw, weights = rep(network_sizes, each = group_size))"
"0","fit_glm_int_disper <- glm(form, family = quasibinomial(), "
"0","  data = data_logit_raw, weights = rep(network_sizes, each = group_size))"
"0",""
"0","## Extract fitted proportions from models with interactions"
"0","p_hat_int = predict(fit_glm_int, type = ""response"")"
"0","p_hat_int_disper = predict(fit_glm_int_disper, type = ""response"")"
"0",""
"0",""
"0","### Estimate SD of Y in each group empirically"
"0","all_SDs_obs_raw = data_logit_raw %>%"
"0","  add_column(p_hat_int = p_hat_int, p_hat_disp = p_hat_int_disper) %>% "
"0","  group_by(across(infect_prop_A:threshold)) %>%"
"0","  summarise(p_hat_obs = mean(prop), SD_obs = sd(prop),"
"0","    p_hat_int = mean(p_hat_int), p_hat_disp = mean(p_hat_disp),"
"0","    .groups=""drop"") %>%"
"0","  mutate(SD_theo = sqrt(p_hat_int * (1 - p_hat_int)/sqrt(num_students)), "
"0","    SD_disp = (p_hat_disp * (1 - p_hat_disp)/sqrt(num_students))) "
"0",""
"0","all_SDs_obs <- filter(all_SDs_obs_raw,"
"0","  !((threshold == ""100"") & (SD_obs^2 > 0.0015)))"
"0",""
