Epidemic Model: Susceptible
                Exposed
                Asymptomatic
                Infectious
                Removed

            S → E → A → R
                  ↘ I ↗




Important Objects:
status is a wrapper containing "classes" and "students"
    "classes" is a vector of individual classes
        A class is a dictionary containing "size", "risk", "days", and some compartments
            "size" is the number of students in the class
            "risk" is the probability of a single susceptible in the class becoming infected by either an asymptomatic or infected individual
                Formula is 1 - (1 - p_A)^N_A * (1 - p_I)^N_I, where p_A and p_I are the probabilities of being infected by a single A or I respectively
            "days" is the indices of days on which the class meets (1 = Monday, 2 = Tuesday,..., 7 = Sunday)
            Each compartment is keyed by its letter (e.g. "S" or "E", specifically a string), and includes a vector of indices of the students from the class in that compartment
                Indices are to "students"
    "students" is a vector of individual students
        A student is a dictionary containing:
            "compartment" -  Its compartment label (e.g. "S") 
            "classes" - A vector of its class indices. Indices are to the global "classes" object
    "parameters" is a dictionary containing all the scalar parameters defined in the Global Parameters section
        I.e. Everything but status

Global Parameters:
    status: A dictionary containing a vector of classes and a vector of students
    infect_param_A: Proportionality constant for infection probability from asymptomatic compartment
    infect_param_I: Proportionality constant for infection probability from infected compartment
    advance_prob_E: Probability of an E moving to either A or I on a particular day
    E_to_A_prob: Probability that an advancement from E is to A
    E_to_I_prob = 1 - E_to_A_prob: Probability that an advancement from E is to I 
    recovery_prob_A: Probability of an A moving to R on a particular day
    recovery_prob_I: Probability of an I moving to R on a particular day

Files:
    Helper_Functions.jl
        Defines get_compartments(students, X, output = "indices")
            Extracts all students in compartment X as either indices or student objects
        Defines change_compartment!(status, ind_student, compartment_new)
            Moves student with given index in to compartment_new. Updates both their student object and all their classes
        Defines transmit_prob(class_size, infect_param)
            Computes the probability of transmission allong a single pair
            Defined explicitly to allow easy modification throughout rest of code
        Defines class_risk(class, infect_param_A, infect_param_I)
            Computes the class' risk under the given parameter values (see Important Objects section for definition)
        Defines compute_risk!(class, infect_param_A, infect_param_I)
            Calls class_risk and stores the result in class["risk"]
        Defines classwise_compartment_count(class, X)
            Gets the number of students in class who are in compartment X
        Defines status_compartment_count(status, X)
            Gets the number of students in compartment X across all classes in status
        Defines compartment_trajectory(all_statuses, X)
            Gets the number of students in compartment X at each step in all_statuses and returns as a vector
            NEEDS UNIT TESTS
        Defines trajectory_summary(all_trajs)
            Computes the means and SDs at each time point in the provided trajectories
            In all_trajs, rows index replicates while columns index days
        Defines mean_trajectory(all_sim_outputs, compartment)
            Computes the mean trajectory for the specified compartment across simulation runs
        Defines trajectory_sd(all_sim_outputs, compartment)
            Computes the pointwise sd of the trajectory for the specified compartment across simulation runs
    
    Toy_Simulation.jl
        Defines make_status(N_students, N_classes)
            Creates a status object with the specified number of students and classes
        Defines update_risk!(class, infect_param_A, infect_param_I) 
            Initializes or updates "risk" in "class" based on the number of asymptomatics and infecteds
            infect_param_A and infect_param_I are the proportionality constants for the transmission probabilities from A and I respectively
        FIX NEEDED: Used to just contain raw code instead of being contained in a function, so some helper functions are defined inside make_status()
    
    Update_Functions.jl
        Defines update_S!(status_new, status_old, day)
            Moves susceptibles to exposeds in status_new based on information (especially classwise risks) in status_old
            Only allows transmission via classes which meet on the specified day
            Note: A susceptible can be targeted for infection via multiple classes in which they are enrolled. For updating purposes, 
                this is identical to only being infected once. This is clearly preferable to the alternative, which requires that susceptibles 
                in classes later in the for loop are at greater risk (since more of the susceptibles in these later classes will have moved to 
                a different compartment)
        Defines update_E!(status_new, status_old, advance_prob_E, E_to_A_prob)
            Moves exposeds to asymptomatic or infected in status_new based on information in status_old and the supplied parameters
            advance_prob_E is the probability of a single exposed student moving to another compartment on a specific day
            E_to_A_prob is the probability that a given transition from E is to asymptomatic rather than infected
        Defines update_A!(status_new, status_old, recovery_prob_A)
            Moves asymptomatics to recovered in status_new based on information in status_old and the supplied parameters
            recovery_prob_A is the probability of a single asymptomatic student moving to recovered on a specific day
            Very similar to update_I!
        Defines update_I!(status_new, status_old, recovery_prob_I)
            Moves infecteds to recovered in status_new based on information in status_old and the supplied parameters
            recovery_prob_I is the probability of a single infected student moving to recovered on a specific day
            Very similar to update_A!
        Defines update_risk!(status_new)
            Computes the classwise risks based on new counts of asymptomatics and infecteds
        Defines one_step!(status)
            Calls all other updating functions on status
            Can also be called with all parameters passed explicitly
                Caution: Because of Julia's multiple dispatch, it is best to either pass all parameters or none.
                In particular, you cannot specify, e.g., recovery_prob_A = recovery_prob_A. Arguments are only
                identified by their position
        Defines one_term(status_initial, days)
            Runs the simulation stating at the given status for the specified number of days
            NEEDS UNIT TESTS
        Defines run_sim(status, n_initial_cases, n_days)
            Infects some initial cases, then runs the simulation on a copy of status
            NEEDS UNIT TESTS
        Defines one_parameter_set(.)
            Runs M simulation replicates with the specified parameter values on the provided initialized status object.
            See function definition for argument list. Broadly, it takes model parameters as inputs

    Unit_Tests.jl  
        Contains unit tests for the functions in Update_Functions.jl and Helper_Functions.jl
        NEEDED: Tests for compartment_trajectory from Helper_Functions.jl and one_term from Update_Functions.jl

    Read_Data.jl
        Defines read_data(address, add_risk)
            Takes the address of a data file and builds the corresponding status object
            add_risk is a boolean, which indicates whether classwise risks should be computed
                WARNING: if add_risk = true, then infectiousness parameters must be defined in the calling scope